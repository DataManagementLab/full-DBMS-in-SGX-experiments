# Copyright (C) 2023 Gramine contributors
# SPDX-License-Identifier: BSD-3-Clause

# Redis manifest file example

################################## GRAMINE ####################################

# Entrypoint binary which Gramine invokes.
libos.entrypoint = "/hyriseBenchmarkTPCH"

# Verbosity of Gramine debug log (none/error/warning/debug/trace/all). Note
# that GRAMINE_LOG_LEVEL macro is expanded in the Makefile as part of the
# building process: the default is "error" for non-debug builds, and "debug"
# for debug builds.
loader.log_level = "{{ log_level }}"
loader.log_file = "{{ log_file }}"

################################# ARGUMENTS ###################################

# Hardcode application arguments. See README for explanations.
# loader.argv = ["hyriseBenchmarkTPCH", "-s", "1", "-t", "5", "-w", "1", "--scheduler", "true", "--cores", "16", "--clients", "16", "--data_preparation_cores", "1", "-o", "out.json"]
loader.insecure__use_cmdline_argv = true

################################# ENV VARS ####################################

# Specify paths to search for libraries. The usual LD_LIBRARY_PATH syntax
# applies. Paths must be in-Gramine visible paths, not host paths (i.e.,
# paths must be taken from fs.mounts[...].path, not fs.mounts[...].uri).
#
# In case of Redis:
# - /lib is searched for Glibc libraries (ld, libc, libpthread)
loader.env.LD_LIBRARY_PATH = "/lib:/hyriselib:{{ arch_libdir }}"

################################## SIGNALS ####################################

# Allow for injecting SIGTERM signal from the host. Without this option,
# pressing `Ctrl + C` wouldn't terminate Redis.
sys.enable_sigterm_injection = true

############################### PERF SETTINGS #################################

libos.check_invalid_pointers = {{ 'false' if optimize == '1' else 'true' }}
sgx.preheat_enclave = {{ 'true' if optimize == '1' else 'false' }}
sgx.enable_stats = {{ 'true' if stats == '1' else 'false' }}

################################# MOUNT FS ####################################

# General notes:
# - All mount points are mounted using the default 'chroot' type.
# - `path`: names of directories and files in Gramine environment; they may be
#           arbitrary but here we mostly reuse host URIs for simplicity (except
#           for the first `/lib` mount point).
# - `uri`:  names of directories and files on the host, somewhat confusingly
#           prepended by the 'file:' keyword.

fs.mounts = [
  # Mount on-host directory to Gramine glibc/runtime libraries (in 'uri') into
  # in-Gramine visible directory /lib (in 'path').
  { path = "/lib", uri = "file:{{ gramine.runtimedir() }}" },

  { path = "/hyriselib", uri = "file:lib" },

  # { path = "{{ arch_libdir }}", uri = "file:{{ arch_libdir }}" },
  { path = "/lib/x86_64-linux-gnu/libatomic.so.1", uri = "file:/lib/x86_64-linux-gnu/libatomic.so.1" },
  { path = "/lib/x86_64-linux-gnu/libboost_container.so.1.83.0", uri = "file:/lib/x86_64-linux-gnu/libboost_container.so.1.83.0" },
  { path = "/lib/x86_64-linux-gnu/libboost_date_time.so.1.83.0", uri = "file:/lib/x86_64-linux-gnu/libboost_date_time.so.1.83.0" },
  { path = "/lib/x86_64-linux-gnu/libsqlite3.so.0", uri = "file:/lib/x86_64-linux-gnu/libsqlite3.so.0" },
  { path = "/lib/x86_64-linux-gnu/libtbb.so.12", uri = "file:/lib/x86_64-linux-gnu/libtbb.so.12" },
  { path = "/lib/x86_64-linux-gnu/libnuma.so.1", uri = "file:/lib/x86_64-linux-gnu/libnuma.so.1" },
  { path = "/lib/x86_64-linux-gnu/libm.so.6", uri = "file:/lib/x86_64-linux-gnu/libm.so.6" },
  { path = "/lib/x86_64-linux-gnu/libgcc_s.so.1", uri = "file:/lib/x86_64-linux-gnu/libgcc_s.so.1" },
  { path = "/lib/x86_64-linux-gnu/libstdc++.so.6", uri = "file:/lib/x86_64-linux-gnu/libstdc++.so.6" },

  # Mount redis-server executable (located in the current directory) under the
  # in-Gramine visible root directory.
  { path = "/hyriseBenchmarkTPCH", uri = "file:hyriseBenchmarkTPCH" },
  { path = "/tpch_cached_tables", uri = "file:tpch_cached_tables" },
  { path = "/results", uri = "file:results" },
]

############################### SGX: GENERAL ##################################

# Create a debug SGX enclave (with SIGSTRUCT.ATTRIBUTES.DEBUG bit set to 1).
# This allows to debug Gramine with the application using GDB, read perf
# counters and enable SGX statistics. Note that this option is *insecure*!
sgx.debug = true
{{ "sgx.profile.enable = 'main'" if profile == "1" }}
{{ "sgx.profile.with_stack = true" if profile == "1" }}

# Set enclave size (somewhat arbitrarily) to 1024MB. Recall that SGX v1 requires
# to specify enclave size at enclave creation time. If Redis exhausts these
# 1024MB then it will start failing with random errors. Greater enclave sizes
# result in longer startup times, smaller enclave sizes are not enough for
# typical Redis workloads.
sgx.enclave_size = "64G"

# Enable Enclave Dynamic Memory Management (EDMM) feature based on EDMM
# environment variable. This allows for addition of pages to enclave in runtime,
# instead of allocating them upfront at startup. If this feature is enabled,
# `sgx.enclave_size` above describes a maximal enclave size and can usually be
# increased without negative consequences (it does not impact startup time).
sgx.edmm_enable = false

# Set maximum number of in-enclave threads (somewhat arbitrarily) to 8. Recall
# that SGX v1 requires to specify the maximum number of simultaneous threads at
# enclave creation time.
#
# Note that when EDMM is enabled, there is no need to specify a particular
# number of threads, as Gramine will automatically adjust to the application
# demands.
#
# Note that internally Gramine may spawn two additional threads, one for IPC
# and one for asynchronous events/alarms. Redis is technically single-threaded
# but spawns couple additional threads to do background bookkeeping. Therefore,
# specifying '8' allows to run a maximum of 6 Redis threads which is enough.
sgx.max_threads = 64

############################# SGX: TRUSTED FILES ###############################

# Specify all files used by Redis and its dependencies (including all libraries
# which can be loaded at runtime via dlopen), as well as other static read-only
# files (like configuration files).
#
# The paths to files are on-host paths. These files will be searched for in
# in-Gramine visible paths according to mount points above.
#
# As part of the build process, Gramine-SGX script (`gramine-sgx-sign`) finds
# each specified file, measures its hash, and adds it to the manifest entry for
# that file (converting each entry to a table with "uri" and "sha256" keys).
# Note that this happens on the developer machine or a build server. If a
# directory is specified in the list below, then this directory is recursively
# traversed and each found file is processed as described above.
#
# At runtime, during loading of each "trusted file", Gramine-SGX measures its
# hash and compares with the "sha256" value in the corresponding manifest entry.
# If hashes match, this file is trusted and allowed to be loaded and used. Note
# that this happens on the deployment machine.
sgx.trusted_files = [
  "file:hyriseBenchmarkTPCH",
  "file:lib/",
  "file:/lib/x86_64-linux-gnu/libatomic.so.1",
  "file:/lib/x86_64-linux-gnu/libboost_container.so.1.83.0",
  "file:/lib/x86_64-linux-gnu/libboost_date_time.so.1.83.0",
  "file:/lib/x86_64-linux-gnu/libsqlite3.so.0",
  "file:/lib/x86_64-linux-gnu/libtbb.so.12",
  "file:/lib/x86_64-linux-gnu/libnuma.so.1",
  "file:/lib/x86_64-linux-gnu/libm.so.6",
  "file:/lib/x86_64-linux-gnu/libgcc_s.so.1",
  "file:/lib/x86_64-linux-gnu/libstdc++.so.6",
  "file:{{ gramine.runtimedir() }}/",
]

sgx.allowed_files = [
  "file:tpch_cached_tables",
  "file:results"
]
